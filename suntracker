# External module imports
import RPi.GPIO as GPIO
import time

# Pin Definitons:
motorTfwd = 5  # fwd pan
motorTrev = 6  # rev pan

motorPccw = 13  # fwd tilt
motorPcw = 19  # rev tilt

#light sensors give a low signal(0v when in sunlight) and a high signal(3.3v in full sunlight)
sen0 = 12  # topleft
sen1 = 16  # topright
sen2 = 20  # downleft
sen3 = 21  # downright
sen4 = 26  # ambiant light sensor

allsensors = [sen0, sen1, sen2, sen3]
allmotors = [motorTfwd, motorTrev, motorPccw, motorPcw]

#limit switches so not to over rotate
limittfwd = 23 #limit switch for tiltfwd
limittrev = 24 # limit switch for tiltrev

limitPccw = 17 #limit switch for panccw
limitPcw = 27 #limit switch for pancw

# Pin Setup:
GPIO.setmode(GPIO.BCM)  # Broadcom pin-numbering scheme
GPIO.setup(motorTfwd, GPIO.OUT)  #  pin set as output
GPIO.setup(motorTrev, GPIO.OUT)  #  pin set as output
GPIO.setup(motorPccw, GPIO.OUT)  #  pin set as output
GPIO.setup(motorPcw, GPIO.OUT)  #  pin set as output

GPIO.setup(12, GPIO.IN, pull_up_down=GPIO.PUD_UP)  #  pin set as input
GPIO.setup(sen1, GPIO.IN)  #  pin set as input
GPIO.setup(sen2, GPIO.IN)  #  pin set as input
GPIO.setup(sen3, GPIO.IN)  #  pin set as input
#GPIO.setup(sen2, GPIO.input)  #  pin set as input
#GPIO.setup(sen3, GPIO.IN)  #  pin set as input

# Initial state for motors:
GPIO.output(motorTfwd, GPIO.LOW)
GPIO.output(motorTrev, GPIO.LOW)
GPIO.output(motorPccw, GPIO.LOW)
GPIO.output(motorPcw, GPIO.LOW)
#senors are a 0 in full light, 1 for dark
print("Press CTRL+C to exit")
try :
        while True:
            button_state = GPIO.input(12)
            button_state1 = GPIO.input(20)

            button_stateleft = GPIO.input(12) + GPIO.input(20)
            button_stateright = GPIO.input(16) + GPIO.input(21)

            button_stateup = GPIO.input(12) + GPIO.input(16)
            button_statedown = GPIO.input(20) + GPIO.input(21)

            #Case1)
            if button_stateup == True: #if state =true, then not in sun= rotate down till we in the sun
                GPIO.output(6, True)
                print('Button Pressed...')
                time.sleep(0.2)
            else : #rotate motor other direction
                GPIO.output(6, False)

            #Case2
            #this rotates up until in the sun
            if button_statedown == True:
                GPIO.output(13, True)
                print('Button1 Pressed...')
                time.sleep(0.2)
            else : #rotate motor other direction
                GPIO.output(13, False)
            #Case3
            #this rotates the panel to the light source
            if button_stateleft == True:
                GPIO.output(5, True)
                print('Buttonleft Pressed...')
                time.sleep(0.2)
            else : #rotate motor other direction
                GPIO.output(5, False)
            #Case4
            if button_stateright == True:
                GPIO.output(19, True)
                print('Buttonleft Pressed...')
                time.sleep(0.2)
            else : #rotate motor other direction
                GPIO.output(19, False)
		#print "Stopping motor"
	#	GPIO.cleanup()
except :
    GPIO.cleanup()
    


